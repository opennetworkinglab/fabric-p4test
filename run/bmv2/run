#!/usr/bin/env bash

set -e

# Stratum BMv2
# Use image sha to pin a specific stratum_bmv2 build and have reproducible runs.
# TODO: instrument CI to test on both a stable version and the latest one
MN_STRATUM_IMG="opennetworking/mn-stratum:latest@sha256:1bba2e2c06460c73b0133ae22829937786217e5f20f8f80fcc3063dcf6707ebe"

# Tester image
# Contains PTF and tvutils libraries, as well as P4RT, gNMI, and TV Python bindings
# Build with Dockerfile.ptf file in the root of the project, for having updated scapy library
TESTER_DOCKER_IMG=dmoro92/ptf:latest@sha256:03b84eef2ec396a87547ed897aba5268f56ec05e88b0eef48b598ff5b325898d

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
ROOT_DIR=${DIR}/../..

if [[ -z "${ONOS_ROOT}" ]]; then
    echo "ERROR: ONOS_ROOT env not defined"
    exit 1
fi

# Clean up old logs (if any)
rm -rf "${DIR}"/log
mkdir "${DIR}"/log

rnd=${RANDOM}

function stop() {
    set +e
    echo "*** Stopping ${dutRunName}..."
    docker stop -t0 "${dutRunName}" > /dev/null
}
trap stop EXIT

# stratum_bmv2
dutImageName=${MN_STRATUM_IMG}
dutRunName=stratum-bmv2-${rnd}

echo "*** Starting ${dutRunName}..."
docker run --name ${dutRunName} -d -it --privileged --rm \
    --entrypoint "/fabric-p4test/run/bmv2/stratum_entrypoint.sh" \
    -v "${ROOT_DIR}":/fabric-p4test \
    ${dutImageName}
sleep 2

# tester
# Run and show log
testerRunName=tester-${rnd}
echo "*** Starting ${testerRunName}..."
# Do not attach stdin if running in an environment without it (e.g., Jenkins)
it=$(test -t 0 && echo "-it" || echo "-t")
docker run --name ${testerRunName} ${it} --privileged --rm \
    --network "container:${dutRunName}" \
    -v "${ROOT_DIR}":/fabric-p4test \
    -v "${ONOS_ROOT}":/onos -e ONOS_ROOT=/onos \
    "${TESTER_DOCKER_IMG}" \
    bash /fabric-p4test/run/bmv2/start_test.sh "${FABRIC_PROFILE}" ${@}
